const MessengerFacade = require('./facade');

// Инициализация фасада мессенджера
const messenger = new MessengerFacade();

// Регистрация трех пользователей
const Elena = messenger.registerUser('Елена');
const Ivan = messenger.registerUser('Иван');
const Maria = messenger.registerUser('Мария');

// Отправка прямого сообщения и объявления
messenger.directMessage(Elena, 'Вася', 'Привет, Иван!');
messenger.directMessage(Elena, 'Иван', 'Привет, Иван!');
messenger.directMessage(Ivan, 'Елена', 'Здравствуй, Елена!');
messenger.sendAnnouncement(Maria, 'Привет всем!');

// npm start
// node index.js

/**
 // * Пример простого мессенджера.

 // ? В данном примере мы столкнулись со следующими проблемами:
 // * 1. Нам нужен способ, чтобы пользователи могли отправлять сообщения друг другу, 
    не зная о существовании других пользователей. 
 // * 2. Мы хотим упростить процесс отправки сообщений, 
    особенно когда речь идет о рассылке объявлений для всех.

 // ! Для решения этих проблем мы использовали два паттерна:
 // * 1. Медиатор (MessengerMediator) - позволяет пользователям отправлять сообщения друг другу, 
    используя единую точку связи. Это уменьшает связность между пользователями 
    и позволяет легко добавлять или удалять пользователей.
 // * 2. Фасад (MessengerFacade) - предоставляет упрощенный интерфейс для работы с мессенджером. 
    С его помощью можно регистрировать пользователей, отправлять прямые сообщения 
    и объявления без знания о сложной внутренней структуре системы.
 
 // ! Вывод:
    Таким образом, использование этих паттернов позволяет создать гибкую 
    и модульную систему мессенджера,которая легко масштабируется и модифицируется.
 */

